{"subset": "Code_Contests", "question_id": "Code_Contests_8030_I", "question": "Jack is creating a new online marketplace where sellers can list items for sale, and buyers can purchase them. To help manage the transactions, Jack needs to develop a mechanism that keeps track of all items sold and the total revenue generated by each seller.\n\nYour task is to help Jack create this mechanism.\n\n**Input:**\n1. The first line contains a single integer n (1 ≤ n ≤ 5000) — the number of transactions.\n2. Each of the next n lines contains three pieces of information:\n   - The seller's name (a non-empty string of up to 20 uppercase and lowercase English letters). \n   - The item name (a non-empty string of up to 20 uppercase and lowercase English letters).\n   - The price of the item (an integer between 1 and 1000 inclusive).\n\nEach transaction indicates that the seller sold the item to a buyer at the specified price. A seller can sell multiple items.\n\n**Output:**\n1. The first line should print an integer m — the number of unique sellers.\n2. For the next m lines, print each seller's name and their total revenue sorted by the seller's name in lexicographical order. Each line should contain the seller's name and the total revenue separated by a space.\n\n**Examples:**\n\n**Input:**\n```\n5\nAlice Book 50\nBob Pen 20\nAlice Pen 30\nCharlie Notebook 40\nBob Book 60\n```\n\n**Output:**\n```\n3\nAlice 80\nBob 80\nCharlie 40\n```\n\n**Input:**\n```\n3\nEve Toy 25\nEve Game 45\nEve Puzzle 35\n```\n\n**Output:**\n```\n1\nEve 105\n```\n\n**Note:**\n- All sellers and item names are guaranteed to be distinct within each transaction.\n- In the first example, Alice sold \"Book\" and \"Pen\" for a total of 50 + 30 = 80.\n- Bob sold \"Pen\" and \"Book\" for a total of 20 + 60 = 80.\n- Charlie sold one \"Notebook\" for 40. Freddy did not make any sales, hence he is not in the output.", "solution": "def track_revenue(n, transactions):\n    \"\"\"\n    Tracks the total revenue generated by each seller given a list of transactions.\n    \n    :param n: int: The number of transactions\n    :param transactions: list of tuples: Each transaction is a tuple containing seller name, item name, and price\n    :return: list of tuples: Each tuple contains seller's name and total revenue sorted by the seller's name.\n    \"\"\"\n    from collections import defaultdict\n    \n    revenue = defaultdict(int)\n    \n    for transaction in transactions:\n        seller, item, price = transaction\n        revenue[seller] += price\n    \n    sorted_revenue = sorted(revenue.items())\n    \n    result = [(len(sorted_revenue))] + sorted_revenue\n    return result"}
{"subset": "Code_Contests", "question_id": "Code_Contests_2215_I", "question": "You are given an array of n integers representing the heights of a row of buildings. The problem is to figure out the maximum amount of water that can be trapped between the buildings when it rains. You are required to write a function that computes this value.\n\nInput\n\nThe input consists of two lines. \n\nThe first line contains a single integer n (0 ≤ n ≤ 10^5) — the number of buildings.\n\nThe second line contains n space-separated integers h_i (0 ≤ h_i ≤ 10^9) — the heights of the buildings.\n\nOutput\n\nOutput a single integer — the maximum amount of water that can be trapped between the buildings.\n\nExamples\n\nInput\n6\n0 1 0 2 1 0 1 3 2 1 2 1\n\nOutput\n6\n\nInput\n4\n4 2 0 3 2 5\n\nOutput\n9\n\nNote\n\nIn the first example, the maximum water that can be trapped is 6 units: \n\n  * 1 unit between heights[1] and heights[3]\n  * 1 unit between heights[3] and heights[4]\n  * 3 units between heights[4] and heights[7]\n  * 1 unit between heights[7] and heights[8]\n\nIn the second example, the maximum water that can be trapped is 9 units.", "solution": "def max_trapped_water(n, heights):\n    \"\"\"\n    Returns the maximum amount of water that can be trapped between the buildings.\n    \"\"\"\n    if n < 3:\n        return 0\n    \n    left_max = [0] * n\n    right_max = [0] * n\n    \n    left_max[0] = heights[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i - 1], heights[i])\n        \n    right_max[n - 1] = heights[n - 1]\n    for i in range(n - 2, -1, -1):\n        right_max[i] = max(right_max[i + 1], heights[i])\n        \n    water_trapped = 0\n    for i in range(n):\n        water_trapped += min(left_max[i], right_max[i]) - heights[i]\n        \n    return water_trapped"}
{"subset": "Code_Contests", "question_id": "Code_Contests_4899_I", "question": "You are given a string S representing a certain pattern of ')' and '(' which is always balanced. Determine if the string S can be divided into the minimum number of balanced segments of parentheses. Each segment should be a valid, properly nested string of parentheses, which means every opening bracket must have a corresponding closing bracket.\n\nConstraints:\n* 2 ≤ |S| ≤ 1000 (|S| is the length of the string S.)\n* S is a valid sequence of parentheses ('(' and ')').\n\nInput\n\nInput is given from Standard Input in the following format:\n\nS\n\nOutput\n\nPrint the minimum number of balanced segments.\n\nExamples\n\nInput\n\n(()())(())\n\nOutput\n\n2\n\nInput\n\n((())())\n\nOutput\n\n1\n\nInput\n\n()()()()\n\nOutput\n\n4\n\nInput\n\n((()))()()\n\nOutput\n\n3", "solution": "def min_balanced_segments(s):\n    \"\"\"\n    Given a balanced string s consisting of '(' and ')', return the minimum number of \n    non-overlapping balanced segments.\n    \"\"\"\n    balance = 0\n    segments = 0\n    \n    for char in s:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        \n        if balance == 0:\n            segments += 1\n    \n    return segments\n\n# Example usage:\n# print(min_balanced_segments(\"(()())(())\"))  # Expected output: 2"}
{"subset": "Code_Contests", "question_id": "Code_Contests_22963_I", "question": "In a certain city, there is a popular park which has a number of interconnected pathways in the form of a grid (rows and columns). The park authorities want to create a new walking path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1) of the grid. However, they want this path to be the safest possible, and the safety levels are represented by a 2D array where each cell has an integer value representing its safety level (lower is safer).\n\nYou are asked to determine the minimum possible sum of safety levels along the path from the top-left to the bottom-right corner. You are only allowed to move right or down at any point in time.\n\nWrite a program that takes the number of test cases, followed by inputs for each test case that include the dimensions of the grid (N and M) and the grid of safety levels. Your program should output the minimum possible sum of safety levels for each test case.\n\nInput\nThe first line of the input contains an integer T denoting the number of test cases. For each test case, the first line contains two space-separated integers N and M (1 <= N, M <= 100), and each of the next N lines contains M space-separated integers representing the safety levels of the grid.\n\nOutput\nOutput exactly T lines, each containing the desired answer for the respective test case.\n\nConstraints\n1 <= T <= 10\n1 <= N, M <= 100\n0 <= safety levels <= 1000\n\nExample\nInput:\n2\n3 3\n1 3 1\n1 5 1\n4 2 1\n2 2\n1 2\n3 4\n\nOutput:\n7\n7\n\nExplanation\nIn the first test case, we have the following grid:\n1 3 1\n1 5 1\n4 2 1\n\nThe safest path from the top-left to the bottom-right is 1 -> 3 -> 1 -> 1 -> 1, which sums up to 7.", "solution": "def min_safety_sum(T, cases):\n    results = []\n    for case in cases:\n        N, M, grid = case\n        dp = [[0] * M for _ in range(N)]\n        \n        dp[0][0] = grid[0][0]\n        \n        for i in range(1, N):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        \n        for j in range(1, M):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        \n        for i in range(1, N):\n            for j in range(1, M):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        \n        results.append(dp[N-1][M-1])\n    \n    return results"}
{"subset": "Code_Contests", "question_id": "Code_Contests_6236_I", "question": "Given a grid of size m x n where each cell in the grid can either be a 0 or a 1. We define a block as a contiguous set of cells with the value 1 that are connected either horizontally or vertically. Your task is to determine the total number of distinct blocks in the grid.\n\nInput\n\nThe first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. Each of the next m lines contains n space-separated integers either 0 or 1.\n\nOutput\n\nOutput a single integer — the total number of distinct blocks of 1s in the grid.\n\nExamples\n\nInput\n\n4 5\n1 0 0 1 0\n1 1 0 0 1\n0 0 1 1 1\n0 0 0 1 0\n\nOutput\n\n3\n\nInput\n\n3 3\n0 1 0\n1 0 1\n0 1 0\n\nOutput\n\n4\n\nInput\n\n5 5\n1 1 1 1 1\n1 0 0 0 1\n1 0 1 0 1\n1 0 0 0 1\n1 1 1 1 1\n\nOutput\n\n2", "solution": "def num_blocks(grid):\n    # Helper function to perform DFS and mark cells as visited\n    def dfs(grid, visited, i, j):\n        stack = [(i, j)]\n        while stack:\n            x, y = stack.pop()\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1 and not visited[x][y]:\n                visited[x][y] = True\n                # Check all four possible directions\n                stack.append((x+1, y))\n                stack.append((x-1, y))\n                stack.append((x, y+1))\n                stack.append((x, y-1))\n\n    # Grid dimensions\n    m, n = len(grid), len(grid[0])\n    visited = [[False]*n for _ in range(m)]\n    block_count = 0\n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1 and not visited[i][j]:\n                # New block found, perform DFS\n                block_count += 1\n                dfs(grid, visited, i, j)\n\n    return block_count"}
{"subset": "Code_Contests", "question_id": "Code_Contests_13726_I", "question": "You are given a robot that moves on a three-dimensional grid starting from the origin point (0, 0, 0). The robot receives an array of commands, and each command contains a direction (`\"UP\"`, `\"DOWN\"`, `\"LEFT\"`, `\"RIGHT\"`, `\"FORWARD\"`, `\"BACKWARD\"`) and a distance. The robot executes the commands in the given order. \n\nDetermine the robot's final position after all commands have been executed.\n\n### Command Directions:\n- `\"UP\"` increases the z-coordinate.\n- `\"DOWN\"` decreases the z-coordinate.\n- `\"LEFT\"` decreases the x-coordinate.\n- `\"RIGHT\"` increases the x-coordinate.\n- `\"FORWARD\"` increases the y-coordinate.\n- `\"BACKWARD\"` decreases the y-coordinate.\n\n### Constraints:\n- 1 ≤ number of commands ≤ 10^4\n- distance for each command is a positive integer not exceeding 10^3\n- All input values are integers.\n\n### Input\nThe first line contains an integer N, the number of commands.  \nEach of the next N lines contains a direction and a distance, separated by a space.\n\n### Output\nOutput the final position of the robot in the format: `x y z`.\n\n### Examples\nInput\n```\n3\nUP 5\nFORWARD 2\nRIGHT 3\n```\nOutput\n```\n3 2 5\n```\n\nInput\n```\n1\nBACKWARD 7\n```\nOutput\n```\n0 -7 0\n```\n\nInput\n```\n4\nUP 1\nDOWN 1\nLEFT 2\nRIGHT 2\n```\nOutput\n```\n0 0 0\n```", "solution": "def final_position(commands):\n    \"\"\"\n    Calculates the final position of the robot given a list of commands.\n    \n    Args:\n    commands: List of tuples where each tuple contains a direction and a distance.\n    \n    Returns:\n    Tuple of three integers representing the final coordinates (x, y, z).\n    \"\"\"\n    x, y, z = 0, 0, 0\n\n    for direction, distance in commands:\n        if direction == \"UP\":\n            z += distance\n        elif direction == \"DOWN\":\n            z -= distance\n        elif direction == \"LEFT\":\n            x -= distance\n        elif direction == \"RIGHT\":\n            x += distance\n        elif direction == \"FORWARD\":\n            y += distance\n        elif direction == \"BACKWARD\":\n            y -= distance\n    \n    return x, y, z"}
{"subset": "Code_Contests", "question_id": "Code_Contests_16897_I", "question": "You are given a list of integers representing the height of mountains in a row. You need to identify the number of mountain peaks in the list. A mountain peak is defined as an element that is strictly greater than its neighbors.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n\nThe second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9).\n\nOutput\n\nPrint a single number — the number of mountain peaks.\n\nExamples\n\nInput\n\n5\n1 3 2 4 1\n\nOutput\n\n2\n\nInput\n\n6\n2 2 3 4 3 3\n\nOutput\n\n1\n\nNote\n\nIn the first example, two peaks are present:\n- 3 (greater than 1 and 2)\n- 4 (greater than 2 and 1)\n\nIn the second example, one peak is present:\n- 4 (greater than 3 and 3)", "solution": "def count_mountain_peaks(n, heights):\n    \"\"\"\n    Returns the number of mountain peaks in the given list of heights.\n    \n    A mountain peak is an element that is strictly greater than its neighbors.\n    \n    Parameters:\n    n (int): The number of elements in the array.\n    heights (list of int): The list of heights.\n    \n    Returns:\n    int: The number of mountain peaks.\n    \"\"\"\n    if n <= 1:\n        return 0\n\n    peaks_count = 0\n    for i in range(1, n - 1):\n        if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]:\n            peaks_count += 1\n            \n    return peaks_count"}
{"subset": "Code_Contests", "question_id": "Code_Contests_1681_I", "question": "The Problem\n\nThere is a new mathematical concept that you want to explore with your friend. The concept revolves around finding the median of a list. This is an interactive problem.\n\nYou are given a list of n integers. Your task is to determine the median of this list. The median of a list of odd length is the middle element when sorted, and for even length, it is the average of the two middle elements when sorted.\n\nYou don't have direct access to the list, but you can query your friend by giving an index, and he will tell you the value at that index. \n\nHere is the format your queries can take:\n\n1. Query the value at index i: In a separate line, output\n    `? i`\n    Your friend will respond with the integer at index i.\n\nTo determine the median, you can use up to 10 * n queries.\n\nNote: n will always be odd (1 ≤ n ≤ 1000).\n\nOnce you have found the median, print it in the following format:\n    `! median`\n\nInput\n\nThe first line of input contains a single integer n (1 ≤ n ≤ 1000, n is odd).\n\nThe next n lines contain the elements of the list in an unknown order. Each line contains an integer a_i (1 ≤ a_i ≤ 10^9).\n\nInteraction\n\nYou begin the interaction by reading n.\n\nTo ask for the value at index i (1 ≤ i ≤ n), output `? i`.\n\nYour friend will respond with the value at that index.\n\nOnce you determine the median, output `! median`.\n\nExamples\n\nInput\n```\n5\n--indexing is not explicitly provided in input,\nas you have to ask your friend for that information--\n```\n\nOutput\n```\n? 1\n? 2\n? 3\n? 4\n? 5\n! median_value\n```\n\nExplanation\n\nTo find the median correctly, you need to determine the values at specific indices by querying your friend the value at each index. For instance, if the list contains the values `[3, 2, 5, 1, 4]`, the median of this sorted list `[1, 2, 3, 4, 5]` is `3`. You have to determine by querying the appropriate number of indices and then figuring out the median value.\n\n**Implementation Notes:**\n- Since the problem ensures n will always be odd, the median is always a single element.\n- Remember to utilize the allowed queries efficiently to determine the median.\n- Output format should closely follow the specified format, paying attention to flush after each query.\n\nAdditional Examples:\n\nInput:\n\n```\n3\n--indexing is not explicitly provided in input,\nas you have to ask your friend for that information--\n```\n\nOutput:\n\n```\n? 1\n? 2\n? 3\n! median_value\n```\n\nInput:\n\n```\n7\n--indexing is not explicitly provided in input,\nas you have to ask your friend for that information--\n```\n\nOutput:\n\n```\n? 1\n? 2\n? 3\n? 4\n? 5\n? 6\n? 7\n! median_value\n```", "solution": "def find_median(n, query_function):\n    \"\"\"\n    Function to find median by querying the given function.\n    \n    Args:\n    - n: int, number of elements in the list (always odd)\n    - query_function: callable, function to query the list\n    \n    Returns:\n    - int, the median of the list\n    \"\"\"\n    values = []\n    \n    # Query all elements in the list and store them in values\n    for i in range(1, n + 1):\n        value = query_function(i)\n        values.append(value)\n    \n    # Sort the list to find the median\n    values.sort()\n    \n    # Return the middle element as the median\n    median_index = n // 2\n    return values[median_index]\n\ndef query_function(index, data):\n    \"\"\"\n    Mock query function to simulate querying friend's list.\n    \n    Args:\n    - index: int, the index to query (1-based)\n    - data: list of int, the underlying list\n    \n    Returns:\n    - int, the value at the given 1-based index in the list\n    \"\"\"\n    return data[index - 1]"}
{"subset": "Code_Contests", "question_id": "Code_Contests_37519_I", "question": "A company needs to distribute a set of n tasks between two teams such that the load is balanced in terms of task complexity. Each task has a given complexity rating represented by a positive integer.\n\nGiven the list of n task complexities, you need to determine if it is possible to split these tasks into two non-empty subsets with equal sum. If it is possible, return \"YES\", otherwise return \"NO\".\n\nInput\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 30) — the number of tasks.\n\nThe second line contains n positive integers t1, t2, ..., tn (1 ≤ ti ≤ 100), where ti is the complexity of the i-th task.\n\nOutput\n\nPrint \"YES\" if it is possible to split the tasks into two subsets with equal sum, otherwise print \"NO\".\n\nExamples\n\nInput\n\n5\n1 5 11 5\n\nOutput\n\nYES\n\nInput\n\n4\n1 2 3 5\n\nOutput\n\nNO", "solution": "def can_partition(tasks):\n    \"\"\"\n    Determine if it is possible to partition tasks into two subsets with equal sum.\n    \"\"\"\n    total_sum = sum(tasks)\n    \n    # If the total sum is odd, it's not possible to split it into two equal subsets\n    if total_sum % 2 != 0:\n        return \"NO\"\n    \n    target = total_sum // 2\n    \n    # Initiate a boolean DP array of size (target + 1)\n    dp = [False] * (target + 1)\n    dp[0] = True  # There's always a way to make sum 0 by taking no elements\n    \n    for task in tasks:\n        for j in range(target, task - 1, -1):\n            dp[j] = dp[j] or dp[j - task]\n    \n    return \"YES\" if dp[target] else \"NO\""}
{"subset": "Code_Contests", "question_id": "Code_Contests_1102_I", "question": "A rectangular matrix of positive integers is given. Your task is to check if there exists a row or column such that the sum of the elements of that row or column is divisible by a given integer D.\n\nInput\n\nThe first line of input contains three space-separated integers: the number of rows R (1 ≤ R ≤ 10), the number of columns C (1 ≤ C ≤ 10), and the divisor D (1 ≤ D ≤ 100).\n\nEach of the next R lines contains C space-separated integers. Each integer is between 1 and 1000.\n\nOutput\n\nOutput \"YES\" if there exists a row or column such that the sum of its elements is divisible by D. Otherwise, output \"NO\".\n\nExamples\n\nInput\n\n3 3 4\n1 2 3\n4 5 6\n7 8 9\n\nOutput\n\nYES\n\nInput\n\n2 3 10\n1 2 3\n4 5 6\n\nOutput\n\nNO", "solution": "def check_sum_divisible(matrix, R, C, D):\n    for row in matrix:\n        if sum(row) % D == 0:\n            return \"YES\"\n    \n    for col in range(C):\n        col_sum = sum(matrix[row][col] for row in range(R))\n        if col_sum % D == 0:\n            return \"YES\"\n    \n    return \"NO\"\n\n\ndef matrix_sum_divisible(R, C, D, matrix):\n    return check_sum_divisible(matrix, R, C, D)"}
